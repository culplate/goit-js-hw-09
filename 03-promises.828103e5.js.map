{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SACA,MAAMC,EAAOC,SAASC,cAAc,SAiCpC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAACH,E,MAAUC,IAEnBG,EAAO,C,SAACJ,E,MAAUC,GAAO,GAE1BA,EAAM,G,CAzCEJ,SAASC,cAAc,6BAE/BW,iBAAiB,SAExB,SAAsBC,GACpBA,EAAMC,iBAEN,MAAMC,EAAW,IAAIC,SAASjB,IACtBK,MAAAa,EAAKC,KAAEA,EAAIC,OAAEA,GAAWC,OAAOC,YAAYN,EAASO,WAC5D,IAAIC,GAAYN,EACZO,GAAWN,EACXO,GAAaN,EAEjB,GAAe,KAAXA,EAEF,YADAO,EAAA7B,GAAS8B,OAAOC,QAAQ,gCAI1B,IAAK,IAAIC,EAAI,EAAGA,GAAKJ,EAAWI,IAC9B3B,EAAc2B,EAAGN,GACdO,MAAK,EAAC3B,SAAEA,EAAQC,MAAEA,KAAYsB,EAAA7B,GAAS8B,OAAOI,QAAQ,uBAAqB5B,QAAiBC,SAAY4B,OACtG,EAAK7B,WAAUC,WAAcsB,EAAA7B,GAAQ8B,OAACM,QAAO,sBAAS9B,QAA8BC,SAEzFmB,GAAYC,EAERK,IAAMJ,GACRd,YAAW,IAAMe,EAAA7B,GAAS8B,OAAOO,KAAK,8BAA8BX,GAEtExB,EAAKoC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nconst form = document.querySelector('.form');\nconst subBtn = document.querySelector('.form button[type=submit]');\n\nsubBtn.addEventListener('click', handleSubmit)\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n  const formData = new FormData(form);\n  const { delay, step, amount } = Object.fromEntries(formData.entries());\n  let inpDelay = +delay;\n  let inpStep = +step;\n  let inpAmount = +amount;\n  \n  if (amount === '') {\n    Notiflix.Notify.warning('Amount field cannot be empty');\n    return;\n  }\n\n  for (let i = 1; i <= inpAmount; i++) {\n    createPromise(i, inpDelay)\n      .then(({ position, delay }) => Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`))\n      .catch(({ position, delay }) => Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`))\n    \n    inpDelay += inpStep;\n\n    if (i === inpAmount) {\n      setTimeout(() => Notiflix.Notify.info('Hello, whoever is here :)'), inpDelay);\n    }\n    form.reset();\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position, delay});\n      } else {\n        reject({position, delay});\n      }\n    }, delay)\n  });\n}"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","formData","FormData","delay1","step","amount","Object","fromEntries","entries","inpDelay","inpStep","inpAmount","$parcel$interopDefault","Notify","warning","i","then","success","catch","failure","info","reset"],"version":3,"file":"03-promises.828103e5.js.map"}