{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SACMC,EAAOC,SAASC,cAAc,SAgCpC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAACH,WAAUC,UAEnBG,EAAO,CAACJ,WAAUC,S,GAEnBA,E,IAxCQJ,SAASC,cAAc,6BAE/BW,iBAAiB,SAExB,SAAsBC,GACpBA,EAAMC,iBAEN,IAAMC,EAAW,IAAIC,SAASjB,GACEkB,EAAAC,OAAOC,YAAYJ,EAASK,WAApDC,EAAwBJ,EAAxBb,MAAOkB,EAAiBL,EAAjBK,KAAMC,EAAWN,EAAXM,OACjBC,GAAYH,EACZI,GAAWH,EACXI,GAAaH,EAEjB,GAAe,KAAXA,EAEF,YADAI,EAAA9B,GAAS+B,OAAOC,QAAQ,gCAI1B,IAAK,IAAIC,EAAI,EAAGA,GAAKJ,EAAWI,IAC9B5B,EAAc4B,EAAGN,GACdO,MAAK,SAAAC,G,IAAG7B,EAAQ6B,EAAR7B,SAAUC,EAAK4B,EAAL5B,M,OAAYuB,EAAA9B,GAAS+B,OAAOK,QAAQ,uBAAwCC,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,M,IAClG+B,OAAI,SAAAH,G,IAAG7B,EAAQ6B,EAAR7B,SAAUC,EAAK4B,EAAL5B,M,OAAYuB,EAAA9B,GAAS+B,OAAOQ,QAAQ,sBAAqCF,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,M,IAErGoB,GAAYC,EAERK,IAAMJ,GACRf,YAAW,W,OAAMgB,EAAA9B,GAAS+B,OAAOS,KAAK,4B,GAA8Bb,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nconst form = document.querySelector('.form');\nconst subBtn = document.querySelector('.form button[type=submit]');\n\nsubBtn.addEventListener('click', handleSubmit)\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n  const formData = new FormData(form);\n  const { delay, step, amount } = Object.fromEntries(formData.entries());\n  let inpDelay = +delay;\n  let inpStep = +step;\n  let inpAmount = +amount;\n  \n  if (amount === '') {\n    Notiflix.Notify.warning('Amount field cannot be empty');\n    return;\n  }\n\n  for (let i = 1; i <= inpAmount; i++) {\n    createPromise(i, inpDelay)\n      .then(({ position, delay }) => Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`))\n      .catch(({ position, delay }) => Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`))\n    \n    inpDelay += inpStep;\n\n    if (i === inpAmount) {\n      setTimeout(() => Notiflix.Notify.info('Hello, whoever is here :)'), inpDelay);\n    }\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position, delay});\n      } else {\n        reject({position, delay});\n      }\n    }, delay)\n  });\n}"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","formData","FormData","ref","Object","fromEntries","entries","delay1","step","amount","inpDelay","inpStep","inpAmount","$parcel$interopDefault","Notify","warning","i","then","param","success","concat","catch","failure","info"],"version":3,"file":"03-promises.f82f7dd1.js.map"}